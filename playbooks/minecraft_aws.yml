---
- name: minecraft
  hosts: localhost
  become: True
  become_user: root
  tasks:

    - name: aws S3
      package:
        name: "awscli"
        state: present

    - name: Install aws cloudwatch agent
      ansible.builtin.apt:
        deb: https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb

    - name: Add cloudwatch agent to admin group for log visibility
      ansible.builtin.user:
        name: cwagent
        shell: /bin/bash
        groups: adm
        append: yes

    - name: java
      package:
        name: "openjdk-17-jdk"
        state: present

    - name: minecraft user
      user:
        name: minecraft
        shell: /sbin/nologin

    - name: minecraft dirs
      file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
        owner: minecraft
        group: minecraft
      with_items:
        - /opt/minecraft
        - /opt/minecraft/backups
        - /opt/minecraft/server
        - /opt/minecraft/tmp
        - /var/log/minecraft

    - name: minecraft log dirs
      file:
        path: "{{ item }}"
        state: directory
        mode: '0744'
        owner: minecraft
        group: minecraft
      with_items:
        - /var/log/minecraft

    - name: Create log stdout file
      ansible.builtin.file:
        mode: '0744' 
        path: "/var/log/minecraft/stdout.log"
        state: touch
        owner: minecraft
        group: minecraft

    - name: Create log stderr file
      ansible.builtin.file:
        mode: '0744'
        path: "/var/log/minecraft/errors.log"
        state: touch
        owner: minecraft
        group: minecraft

    - name: check for existing backups and restore
      script: /tmp/minecraft/playbooks/fetch_latest_aws_backup.sh
      ignore_errors: yes

    - name: determine if jar downloaded
      stat:
        path: /opt/minecraft/server/server.jar
      register: mc_jar

    - name: set mc_update = False when not defined
      set_fact:
        mc_update: False
      when: mc_update is not defined

    - name: get jar
      get_url:
        url: https://launcher.mojang.com/v1/objects/e00c4052dac1d59a1188b2aa9d5a87113aaf1122/server.jar
        dest: /opt/minecraft/server/server.jar
        mode: '0444'
        owner: minecraft
        group: minecraft
      when: mc_jar.stat.exists == False or mc_update

    - name: determine if eula exists
      stat:
        path: /opt/minecraft/server/eula.txt
      register: mc_eula_file

    - name: run jar when eula not exists (max 60 seconds)
      shell:
        chdir: /opt/minecraft/server/
        cmd: timeout 60 java -Xmx{{ mc_memory }}M -Xms{{ mc_memory }}M -jar server.jar nogui
      ignore_errors: yes
      when: mc_eula_file.stat.exists == False

    - name: agree to eula
      replace:
        path: /opt/minecraft/server/eula.txt
        regexp: '(eula=false)' 
        replace: 'eula=true'
        mode: '0444'
        owner: minecraft
        group: minecraft

    - name: minecraft systemd unit file
      template:
        src: minecraft.service
        dest: /etc/systemd/system/minecraft.service
        mode: '0444'
        owner: root
        group: root

    - name: set server.properties file
      template:
        src: server.properties
        dest: /opt/minecraft/server/server.properties
        mode: '0600'
        owner: minecraft
        group: minecraft

    - name: set aws cloudwatch agent config
      template:
        src: amazon-cloudwatch-agent.json
        dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        mode: '0600'
        owner: cwagent
        group: adm

    - name: start/enable aws cloud agent
      systemd:
        state: started
        enabled: yes
        daemon_reload: yes
        name: amazon-cloudwatch-agent
      register: aws_cw_started

    - name: start/enable minecraft service
      systemd:
        state: started
        enabled: yes
        daemon_reload: yes
        name: minecraft
      register: mc_started

    - name: restart minecraft service if not started previously or mc_update
      systemd:
        state: restarted
        name: minecraft
      when: mc_started.changed or mc_update

    - name: set backup script
      template:
        src: backup.sh
        dest: /opt/minecraft/backup.sh
        mode: '0700'
        owner: root
        group: root

    - name: automate backups
      ansible.builtin.cron:
        name: "backup server"
        minute: "*/30"
        user: root
        job: "sh /opt/minecraft/backup.sh >> /var/log/minecraft_backup.log 2>&1"
          